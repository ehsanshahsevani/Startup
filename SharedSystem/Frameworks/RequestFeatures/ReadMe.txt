آموزش راه اندازی سیستم صفحه بندی جداول سایت

ClassLibrary Name: RequestFeatures

توجه
تا مرحله 4
در تمام
Freamwork , Library
ها
اعم از
	React, Angular, Vue JS, Blazor, MVC, Razor
قابل استفاده میباشد

:)
------------------------------------------------------------------------------------

1)
 ساخت کلاسی برای دریافت پارامترهای مختلف
	در ورژن اول فقط سیستم صفحه بندی 
Pageing

در آپدیت های بعدی سیستم
Filtering و Searching و Ordering

کلاس مورد نظر بهتر است به صورت زیر نام گذاری شود
<DomainName>Parameters
 و از کلاسی در آدرس زیر ارث بری کند
RequestFeatures.RequestParameters

این کلاس یک کلاس
POCO
میباشد که به صورت
abstract
پیاده سازی شده

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

2)
در مرحله دوم کوعری مورد نظر خود را با پارامتر ورودی کلاسی که ساختیم میسازیم
(که میتوان در کنار آن پارامترهای بیشتری نیز استفاده کرد)

و زمانی که کوعری ما آماده شد به دستور زیر کوعری خود را به صورت صفحه ای از
SP [Query]
خارج میکنیم

Sample:

public async Task<PagedList<CareerField>?>
	GetAllInPageAsync(CareerFieldParameters parameters)
{
	var source = DbSet

		.Where(current => current.IsDeleted == false)

		;

	var result =
		await PagedList<CareerField>.ToPagedList(source, parameters);

	return result;
}

در دستور بالا متغییر سورس یک 
IQuerieble
میباشد
بدون هیچ دستوری که آن را
Execute
کند 
و به سمت 
SQL
 بفرستد
پس تابعی برای کامل کردن کار این
SP
با دستور زیر ادامه فرایند صفحه بندی کردن و اعمال تنظیمات و ران کردن کوعری را انجام میدهد

await PagedList<CareerField>.ToPagedList(source, parameters);

سورس ما با کد بالا صفحه بندی شده و برای دیتابیس ارسال میشود



------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------


3)
افزودن یک پراپرتی از نوع
MetaData
به ویو مدل ها
جهت ذخیره اطلاعات جداول و تنظیمات صفحه آنها

RequestFeatures.MetaData



------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------



4)
تغییرات در کنترلر ها
:
افزودن پارامتر تعریف شده در مرحله اول به اکشن هایی که
در صفحاتشان جداولی نمایش داده میشود

[HttpGet]
public async Task<IActionResult>
	IndexAsync([FromQuery] TeacherParameters parameters)
{
	await BindData(parameters);

	return View();
}

سپس تغییراتمان را در توابع بایند هم اعمال میکنیم

پارامتر ورودی میگیرد
برای مثال
	TeacherParameters parameters

و بعد از تولید مدلی از صفحه 
	var pageData = new ViewModels
		.PageViewModels.TeacherPageViewModel();

از کوعری ای که در مرحله دوم نوشتیم استفاده میکنیم
	GetAllAsync() -> GetAllInPageAsync(paramerers)

حال از
PagedList
که به ما برمیگردد لیست و اطلاعات جدول را در متادیتای خود ذخیره میکنیم

توجه
	*) PagedList<T> : List<T>
کلاس لیست ما از لیست سیشارپ ارث بری کرده است که فقط
MetaData
در خود ذخیره میکند

// **************************************************
var result = await UnitOfWork
	.TeacherRepository.GetAllInPageAsync(parameters);

pageData.TableInformation = result!.MetaData;

pageData.List =
		Mapper.Map<List<TeacherViewModel>>(result);
// **************************************************



------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------



5)
تغییرات در
	UI

ابتدا از رکوردی با نام زیر برای ذخیره دیتای جدول و آدرس فعلی آن
استفاده میکنیم
:
Infrastructure.ApplicationTools.TableInformationModel
با
new
کردن این رکورد تمام اطلاعات مورد نیاز برای جدول پر میشود و سپس در
Footer
استفاده میشود

کد زیر را بعد از تگ بسته 
tbody
جدول قرار میدهیم
و با استفاده از پارتشیال ویو

	_TableInformationUi

تنظیمات جدول را به کاربر نشان میدهیم

<tfooter>
	<tr>
		<td colspan="70">
			<Partial name="~/Views/Shared/PartialViews/_TableInformationUi.cshtml"
						model="tableInformationModel" />
		</td>
	</tr>
</tfooter>

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
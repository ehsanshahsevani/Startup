@if (Tags is null || Tags.Count == 0)
{
    return;
}

@if (ShowHeader == true)
{
    <h6 class="col-lg-12">
        @(Resources.DataDictionary.TagSettings)
        <i class="bi bi-tags"></i>
    </h6>
}

@foreach (var item in Tags)
{
    <div class="col-lg col-sm-12 my-1" @key="item.Key">
        <input type="checkbox"
               class="btn-check"
               autocomplete="off"
               id="@(item.Key)"
               value="true"
               checked="@(TagsSelected?.ContainsKey(item.Key) == true)"
               @oninput="(e) => KeyChange(e, item)">
        <label class="btn btn-sm btn-outline-red-ubuntu w-100" for="@(item.Key)">@(item.Value)</label>
    </div>
}

@code {
    private Dictionary<string, string> _tagSelected;

    public TagViewer() : base()
    {
        _tagSelected = new Dictionary<string, string>();
    }

    [Parameter] public Dictionary<string, string>? Tags { get; set; }

    [Parameter] public Dictionary<string, string>? TagsSelected { get; set; }

    [Parameter] public EventCallback<Dictionary<string, string>> OnSelectKey { get; set; }
    
    [Parameter] public bool ShowHeader { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (TagsSelected is not null && TagsSelected.Any())
        {
            _tagSelected = new Dictionary<string, string>(TagsSelected);
            
            await OnSelectKey.InvokeAsync(_tagSelected);
        }
        else
        {
            _tagSelected = new Dictionary<string, string>();
        }
    }

    private async Task KeyChange(ChangeEventArgs args, KeyValuePair<string, string> item)
    {
        if (args.Value is not null && bool.TryParse(args.Value.ToString(), out var state))
        {
            if (TagsSelected is null)
            {
                TagsSelected = new Dictionary<string, string>();
            }

            if (state == true)
            {
                if (!TagsSelected.ContainsKey(item.Key))
                {
                    TagsSelected.Add(item.Key, item.Value);
                }
            }
            else
            {
                if (TagsSelected.ContainsKey(item.Key))
                {
                    TagsSelected.Remove(item.Key);
                }
            }

            _tagSelected = TagsSelected;

            await OnSelectKey.InvokeAsync(_tagSelected);
        }
    }
}
@inject IJSRuntime JsRuntime

<div id="@(ModalId)" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content my-0">
            <div class="modal-header d-flex justify-content-center @(Utility.GetBorderColorByBootstrapColor(HeaderBckgroundColor)) border-bottom border-3">
                <h5 class="modal-title text-center m-0">
                    @(Title)
                </h5>
            </div>
            <div class="modal-body">
                @if (ChildContent is not null)
                {
                    @ChildContent
                }
                else
                {
                    <p>@Body</p>
                }
            </div>
            @if (HasFooter)
            {
                <div class="modal-footer">
                    @FooterContent
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string ModalId { get; set; } = "exampleModal";
    [Parameter] public string Title { get; set; } = "Modal Title";
    [Parameter] public string Body { get; set; } = string.Empty;
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool HasFooter { get; set; }
    [Parameter] public BootstrapColor HeaderBckgroundColor { get; set; }

    private bool IsAnimating { get; set; }
    private bool IsVisible { get; set; }

    public async Task ShowAsync()
    {
        if (IsAnimating == true || IsVisible == true)
        {
            return;
        }

        IsAnimating = true;
        
        try
        {
            await JsRuntime
                .InvokeAsync<object>("ShowModalWithEvent", ModalId, "shown.bs.modal");
            
            IsVisible = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Modal:{ModalId}] ShowAsync Error: {ex.Message}");
        }
        finally
        {
            IsAnimating = false;
        }
    }

    public async Task HideAsync()
    {
        if (IsAnimating == true || IsVisible == false)
        {
            return;
        }

        IsAnimating = true;
        
        try
        {
            await JsRuntime
                .InvokeAsync<object>("HideModalWithEvent", ModalId, "hidden.bs.modal");
            
            IsVisible = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Modal:{ModalId}] HideAsync Error: {ex.Message}");
        }
        finally
        {
            IsAnimating = false;
        }
    }
}

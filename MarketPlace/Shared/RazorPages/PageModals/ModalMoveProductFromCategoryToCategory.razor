@using BlazorComponents.Services
@using SampleResult
@using Result = FluentResults.Result

@inject CategoryService CategoryService
@inject RequestResultService RequestResultService

<ModalComponent ModalId="@(ModalId)"
                @ref="_modal" Title="@(Title)"
                HasFooter="false"
                HeaderBckgroundColor="@(Color)">
    <Form>
        <FormControlSection OneRow="true" IsTextCenter="false">
            <LabelText IsRequired="true">
                @(Resources.DataDictionary.ToCategory)
            </LabelText>
            <SelectCategory @bind-SelectedValue="ToCategory" />
        </FormControlSection>
    </Form>

    <div class="modal-footer m-0 p-0">
        <Button BootstrapColor="BootstrapColor.Primary"
                IsOutLine="true"
                IsWidth100="false"
                Title="@(Resources.ButtonCaptions.Save)"
                OnCLick="OnSubmitClicked">
            @(Resources.ButtonCaptions.Save)
        </Button>
        <Button BootstrapColor="BootstrapColor.Secondary"
                IsOutLine="true"
                IsWidth100="false"
                Title="@(Resources.ButtonCaptions.Close)"
                OnCLick="OnCloseClicked">
            @(Resources.ButtonCaptions.Close)
        </Button>
    </div>
</ModalComponent>


@code {
    private ModalComponent? _modal;

    [Parameter]
    public string? FromCategory { get; set; }
    
    public string? ToCategory { get; set; }

    [Parameter] public BootstrapColor Color { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string ModalId { get; set; } = "modal-price-changer";

    [Parameter] public EventCallback<ProductResponseViewModel> OnSubmit { get; set; }

    [Parameter] public string? Title { get; set; } = Resources.DataDictionary.SubmitForm;

    public ModalMoveProductFromCategoryToCategory()
    {
        ToCategory = null;
    }

    protected override void OnInitialized()
    {
    }

    private async Task OnSubmitClicked()
    {
        var result = new Result();
        
        if (string.IsNullOrEmpty(ToCategory) == true || string.IsNullOrEmpty(FromCategory) == true)
        {
            result.WithError(Resources.Messages.CategoryNameRequired);
            RequestResultService.AddResult(result.ConvertToSampleResult());
            
            await HideAsync();
            
            return;
        }
        
        var resultUpdate =
            await CategoryService
                .MoveProductFromCategoryToCategoryAsync(FromCategory, ToCategory);

        RequestResultService.AddResult(resultUpdate);

        if (result.IsSuccess == true)
        {
            if (OnSubmit.HasDelegate)
            {
                FromCategory = null;
                ToCategory = null;
            }

            await HideAsync();
        }
    }

    private async Task OnCloseClicked()
    {
        await HideAsync();

        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync(null);
        }
    }

    public async Task ShowAsync(string fromCategory)
    {
        if (string.IsNullOrEmpty(fromCategory) == true)
        {
            throw new NullReferenceException(nameof(fromCategory));
        }

        FromCategory = fromCategory;

        if (_modal is not null)
        {
            await _modal.ShowAsync();
        }
    }

    private async Task HideAsync()
    {
        if (_modal != null)
        {
            await _modal.HideAsync();
        }
    }
}
@inherits ComponentBaseMarketplaceFullCustom<TextDynamicResponseViewModel, TextDynamicRequestViewModel>

@page "/text-dynamic/{Id?}"

<PageTitle>
    @(Resources.DataDictionary.TextDynamic)
</PageTitle>

<PageDescription PageDescriptionModel="@(_pageDescription)"/>

<Card>
    <CardHeader UpdateMode="string.IsNullOrEmpty(Model.Id) == false"/>
    <CardBody>
        <Form>
            <FormControlSection OneRow="true">
                <LabelText For="@(nameof(Model.Content))" IsRequired="true">
                    @(Resources.DataDictionary.Content)
                </LabelText>
                <TextAreaCustom @bind-Value="@(Model.Content)" Id="@(nameof(Model.Content))"
                                Rows="3"/>
            </FormControlSection>
            
            <FormControlSection>
                <LabelText For="order" Description="@(Resources.Messages.ForOrdering)">
                    @(Resources.DataDictionary.Order)
                </LabelText>
                <InputNumberCustom @bind-Value="@(Model.Ordering)" Id="order"
                                   Placeholder="@(Resources.Messages.ForOrdering)"/>
            </FormControlSection>
            <FormControlSection IsCheckBoxSection="true">
                <InputCheckBoxCustom @bind-Value="@(Model.IsActive)" Id="@(nameof(Model.IsActive))"/>
                <LabelCheck For="@(nameof(Model.IsActive))">
                    @(Resources.DataDictionary.IsActive)
                </LabelCheck>
            </FormControlSection>

            <FormControlSection OneRow="true">
                <LabelText For="description">
                    @(Resources.DataDictionary.Description)
                </LabelText>
                <TextAreaCustom @bind-Value="@(Model.Description)" Id="@(nameof(Model.Description))"
                                Rows="3"/>
            </FormControlSection>

            <TagPageSetting TagsSelected="Model.TagNamesDictionary()"
                            OnSelectKey="UpdateModelTags"
                            TagStarter="@(nameof(Resources.DataDictionary.TextDynamic))" />
        </Form>
    </CardBody>
    <CardFooter>
        @if (string.IsNullOrEmpty(Model.Id) == true)
        {
            <ButtonCreate OnCLick="@(CreateAsync)"/>
        }
        else
        {
            <ButtonSaveChanges OnCLick="@(() => _modalUpdateQuestion!.ShowAsync(Model.Id))"/>
            <ButtonCancel OnCLick="@(OffUpdateMode)"/>
        }
    </CardFooter>
</Card>

<hr>

@* <FormSearch OnSearch="textSearch => OnSearchAsync(textSearch)"/> *@

<TableSection>
    <Table>
        <TableHead>
            <TableRow IsActive="true">
                <TableHeader>@(Resources.DataDictionary.Row)</TableHeader>
                <TableHeader>@(Resources.DataDictionary.CreateDate)</TableHeader>
                <TableHeader>@(Resources.DataDictionary.Content)</TableHeader>
                <TableHeader>@(Resources.DataDictionary.Order)</TableHeader>
                <TableHeader>@(Resources.DataDictionary.Opration)</TableHeader>
            </TableRow>
        </TableHead>
        <TableBody>
            @if (List is null)
            {
                <TableRow TableColor="BootstrapColor.Warning">
                    <TableData Colspan="10">
                        @(Resources.Messages.TextLoading)
                    </TableData>
                </TableRow>
            }
            else
            {
                for (int index = 0; index < List.Count; index++)
                {
                    TextDynamicResponseViewModel item = List[index];

                    var showIndex = index;

                    <TableRow IsActive="item.IsActive">
                        <TableData>@(showIndex + 1)</TableData>
                        <TableData>@(item.CreateDateShamsi) | @(item.CreateTime)</TableData>
                        <TableData MaxWidth="450">@(item.Content)</TableData>
                        <TableData>@(item.Ordering)</TableData>
                        <TableData>
                            <Update_Delete OnClickedDeleteButton="() => _modalDeleteQuestion!.ShowAsync(item.Id!)"
                                           OnClickedUpdateButton="() => GoToPageAsync(MarketplaceRoutes.TextDynamic(), item.Id!)"></Update_Delete>
                        </TableData>
                    </TableRow>
                }
            }
        </TableBody>
    </Table>
    
    <PaginationSystem @ref="_paginationSystem"
                      MetaData="_metaData"
                      OnChangedMetaData="CallbackMetaData"/>
</TableSection>

<ModalLoading @ref="_loadingModal"/>

<ModalDeleteQuestion @ref="_modalDeleteQuestion" OnDeleteConfirmed="DeleteAsync"/>

<ModalUpdateQuestion @ref="_modalUpdateQuestion" OnUpdateConfirmed="UpdateAsync"/>

<ModalQuestionDeleteAttachments @ref="_modalUpdateQuestionDeleteAttachments"
                                OnDeleteAttachmentsConfirmed="DeleteImageAsync"/>